Question: - 


There are numBottles water bottles that are initially full of water. You can exchange numExchange empty water bottles from the market with one full water bottle.

The operation of drinking a full water bottle turns it into an empty bottle.

Given the two integers numBottles and numExchange, return the maximum number of water bottles you can drink.

 

Example 1:


Input: numBottles = 9, numExchange = 3
Output: 13
Explanation: You can exchange 3 empty bottles to get 1 full water bottle.
Number of water bottles you can drink: 9 + 3 + 1 = 13.
Example 2:


Input: numBottles = 15, numExchange = 4
Output: 19
Explanation: You can exchange 4 empty bottles to get 1 full water bottle. 
Number of water bottles you can drink: 15 + 3 + 1 = 19.
 

Constraints:

1 <= numBottles <= 100
2 <= numExchange <= 100
 



Solution : - 

Intuition
Drink all the water bottles and continuously exchange the numExchange number of empty bottles with full water bottle until you have numExchange empty bottle left.
Approach
Initial Drinking:

Start with a given number of full water bottles (numBottles) and drink them all.
Exchanging Bottles:

Each empty bottle can be exchanged for a new full bottle based on the exchange rate (numExchange).
Loop of Drinking and Exchanging:

Continuously drink and exchange bottles while you have enough empty bottles to make an exchange.
Tracking Total Consumption:

Keep a running total of all the bottles drunk and update the count of empty bottles after each exchange.
Termination:

Stop the process when you no longer have enough empty bottles to exchange for a new full bottle.

Complexity
Time complexity:
O(N)

Space complexity:
O(1)

Code : - 
class Solution {
public:
    int numWaterBottles(int numBottles, int numExchange) {
        int totalBottles = numBottles;

        while (numBottles >= numExchange) {
            totalBottles += numBottles / numExchange;
            numBottles = (numBottles / numExchange) + (numBottles % numExchange);
        }

        return totalBottles;
    }
};
